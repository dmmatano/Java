class FilaCircular{
  int front=-1,rear=-1;
  final int SIZE=5;
  int items[]=new int[SIZE];
  
  boolean isEmpty(){
    return (front==-1);
  }

  boolean isFull(){
    if(rear==SIZE-1 && front==0){
      return true;
    }
    if(front==rear+1){
      return true;
    }
    return false;
  }

  void enqueue(int elemento){
    if(isFull()){
      System.out.print("Fila cheia!\n");
    }else{
      if(front==-1){
        front=0;
      }
      rear=(rear+1)%SIZE;
      items[rear]=elemento;
      System.out.println("Inserido: "+elemento);
    }
  }

  int dequeue(){
    if(isEmpty()){
      System.out.print("Fila vazia!\n");
      return -99999;
    }else{
      int elemento = items[front];
      if(front==rear){
        front=-1;
        rear=-1;
      }else{
        front=(front+1)%SIZE;
      }
      System.out.print("Elemento removido: "+elemento+"\n");
      return elemento;
    }
  }

  void display(){
    System.out.printf("------------\nfront -> %d\n",front);
    System.out.printf("Elementos:\n");
    int z=rear-front;
    if(rear<front){
      for(int i=front;i<SIZE;i++){
        System.out.printf("%d ",this.items[i]);
      }
      for(int i=0;i<=rear;i++){
        System.out.printf("%d ",this.items[i]);
      }
    }else{
      for(int i=front;i<=rear;i++){
        System.out.printf("%d ",this.items[i]);
      }
    }
    
    System.out.printf("\nrear -> %d\n------------\n",rear);
  }

  
}


class Main {
  public static void main(String[] args) {
    FilaCircular q = new FilaCircular();
    q.dequeue();
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);
    q.enqueue(6);
    q.display();
    q.dequeue();
    q.display();
    q.enqueue(7);
    q.display();
  }
}
